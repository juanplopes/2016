<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>This is 2016, not 2012.</title>
 <link href="http://juanlopes.net/2016/atom.xml" rel="self"/>
 <link href="http://juanlopes.net/2016"/>
 <updated>2012-05-07T18:22:42-03:00</updated>
 <id>http://juanlopes.net/2016</id>
 <author>
   <name>Juan Lopes</name>
   <email>me@juanlopes.net</email>
 </author>

 
 <entry>
   <title>Project Euler &#35;1 (revisited)</title>
   <link href="http://juanlopes.net/2016/project-euler-1"/>
   <updated>2012-05-07T00:00:00-03:00</updated>
   <id>http://juanlopes.net/2016/project-euler-1</id>
   <content type="html">&lt;p&gt;O &lt;a href='http://projecteuler.net/'&gt;Project Euler&lt;/a&gt; ganhou muita importância ultimamente. É possível encontrar centenas (se não milhares) de posts em blogs e repositórios do github com soluções.&lt;/p&gt;

&lt;p&gt;Aparentemente o problema mais famoso é o &lt;a href='http://projecteuler.net/problem=1'&gt;primeiro&lt;/a&gt;, que pede a soma de todos os números divisíveis por 3 ou 5 menores que 1000. Uma solução simples (e eficaz) em python pareceria com:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;euler1&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;limit&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
    &lt;span class='n'&gt;answer&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='ow'&gt;in&lt;/span&gt; &lt;span class='nb'&gt;range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;limit&lt;/span&gt;&lt;span class='p'&gt;):&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='ow'&gt;or&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
            &lt;span class='n'&gt;answer&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;answer&lt;/span&gt;

&lt;span class='k'&gt;print&lt;/span&gt; &lt;span class='n'&gt;euler1&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Essa é uma solução válida para esse problema. Funciona muito bem até 1000. O problema é que ela não escala tão bem. Executar &lt;code&gt;euler1(1000000000)&lt;/code&gt; demoraria tempo suficiente para desistir. Como resolver, então?&lt;/p&gt;

&lt;p&gt;Seguem alguns casos de teste com valores esperados:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
assert euler1(1000) == 233168
assert euler1(1234) == 354858
assert euler1(1000000000) == 233333333166666668
assert euler1(123456789123456789) == 3556368382157191567225525788624704
&lt;/code&gt;&lt;/p&gt;</content>
 </entry>
 
 
</feed>